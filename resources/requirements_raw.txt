Template Starter Kit for  SAAS platform and Digital ApplicationDesign a plat for a template starter-kit platform for SAAS and Digital Application.The tech stack:Backend - NestJSDatabase - PostreSQLAdmin Dashboard (Admin Frontend) - NextJSDesign System and React Components - https://ui.shadcn.com/Project Code Management - Mono RepoInfrastructure - IaaC - Terraform (in a folder in the root of the project)Graphic resources for use in the project  (logo, images, other) - resources folder in the root of the projectAI Code generation - claude-codeAI task management - TODO.md inside a tasks folder. Create a workplan and update the workplan and task status while developing and building the projects. Main code instructions file - CLAUDE.md in the project folder rootStyle instructions - in the folder Style - STYLE_GUIDE.mdCreate Component Storybook - for consistency reference   Maintain UI_CHANGE_LOG.md in the style folderDevelopment environments - dev, stage, prod. Use .env filesORM - use typeORMFrontend state management - use Redux Front end networking - use AxiosFor local development use docker-comose Code management - gitCommit changes and create develop branchMerge to main branch when donePush to remote branch, work with GitHub - Ask the developer for remote branch information when setting or starting the development of the project.Authorization - Use ABAC Project Apps (Backend, Admin Dashboard, frontend) are in the Apps folder.Coding language - TypescriptCode documentation - us JSDOC, . Document every function, class, module, enum, also add inline documentation for complex or important logic API Documentation and access - SWAGGER Use AWS Cognito as the Authentication platform. Use user-pool named “next-dev”UX UI Guide for Consistent SaaS DashboardCreate the NextJS project, with tailwind, typescriptInstall the shdcn/uiConfigure the shadcn/ui// components.json{  &quot;style&quot;: &quot;default&quot;,  &quot;rsc&quot;: true,  &quot;tsx&quot;: true,  &quot;tailwind&quot;: {    &quot;config&quot;: &quot;tailwind.config.ts&quot;,    &quot;css&quot;: &quot;app/globals.css&quot;,    &quot;baseColor&quot;: &quot;slate&quot;,    &quot;cssVariables&quot;: true  },  &quot;aliases&quot;: {    &quot;components&quot;: &quot;@/components&quot;,    &quot;utils&quot;: &quot;@/lib/utils&quot;  }}Create COMPONENETS_REFERENCE.md in the style folder# COMPONENTS_REFERENCE.md## Available shadcn/ui Components- Button: Primary, Secondary, Destructive, Outline, Ghost, Link- Card: Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter- Input: Standard text input with label- Select: Dropdown selection- Table: Data display with sorting- Dialog: Modal windows- Toast: Notifications## Import Pattern```typescriptimport { Button } from &quot;@/components/ui/button&quot;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;Components installation# Install components as needednpx shadcn-ui@latest add buttonnpx shadcn-ui@latest add cardnpx shadcn-ui@latest add tablenpx shadcn-ui@latest add formnpx shadcn-ui@latest add dashboardTemplate Prompts and instructionsDashboard Page Template&quot;Create a dashboard page using shadcn/ui components. Include:Page layout with sidebar navigationCard components for metricsTable for recent dataUse only installed shadcn components from COMPONENTS_REFERENCE.md&quot;Form Template&quot;Build a form using shadcn/ui Form component with:Proper validation using zodToast notifications for success/errorConsistent spacing using space-y-4&quot;Style Guide// styles/constants.tsexport const SPACING = {  page: &quot;p-6&quot;,  card: &quot;p-4&quot;,  section: &quot;space-y-6&quot;,  form: &quot;space-y-4&quot;}export const LAYOUTS = {  dashboard: &quot;grid gap-4 md:grid-cols-2 lg:grid-cols-4&quot;,  form: &quot;max-w-2xl mx-auto&quot;,  table: &quot;w-full&quot;}Layout Patterns// layouts/DashboardLayout.tsxexport default function DashboardLayout({ children }) {  return (    &lt;div className=&quot;flex h-screen bg-gray-50&quot;&gt;      &lt;Sidebar /&gt;      &lt;main className=&quot;flex-1 overflow-y-auto p-6&quot;&gt;        {children}      &lt;/main&gt;    &lt;/div&gt;  )}Component Patterns// components/MetricCard.tsxexport function MetricCard({ title, value, change }) {  return (    &lt;Card&gt;      &lt;CardHeader className=&quot;pb-2&quot;&gt;        &lt;CardTitle className=&quot;text-sm font-medium text-gray-600&quot;&gt;          {title}        &lt;/CardTitle&gt;      &lt;/CardHeader&gt;      &lt;CardContent&gt;        &lt;div className=&quot;text-2xl font-bold&quot;&gt;{value}&lt;/div&gt;        &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{change}&lt;/p&gt;      &lt;/CardContent&gt;    &lt;/Card&gt;  )}Use Consistent Spacingconst spacing = {  section: &quot;mb-8&quot;,  component: &quot;mb-4&quot;,   element: &quot;mb-2&quot;}Create Base Components Structure// templates/CardTemplate.tsxexport const CardTemplate = ({ title, children }) =&gt; (  &lt;Card className=&quot;p-6&quot;&gt;    &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;{title}&lt;/h3&gt;    {children}  &lt;/Card&gt;)Put base components in a “base” folder in the components folder. Use CSS Variables for Theming/* globals.css */:root {  --primary: 243 80% 62%;  --secondary: 263 70% 65%;  --background: 0 0% 100%;  --foreground: 224 71% 4%;}MAIN Layouts Reference:Dashboard layouthttps://ui.shadcn.com/blocksUse dashboard-01 optionSidebarUse sidebar-07Authenticationhttps://ui.shadcn.com/blocks/authenticationUse login-04Other componentshttps://ui.shadcn.com/docs/componentsShadcn ThemeUse Default theme.https://ui.shadcn.com/themesStyle GuideUse this style guide,Compatible with Tailwind v4app/global.css:root {  --radius: 0.65rem;  --background: oklch(1 0 0);  --foreground: oklch(0.145 0 0);  --card: oklch(1 0 0);  --card-foreground: oklch(0.145 0 0);  --popover: oklch(1 0 0);  --popover-foreground: oklch(0.145 0 0);  --primary: oklch(0.205 0 0);  --primary-foreground: oklch(0.985 0 0);  --secondary: oklch(0.97 0 0);  --secondary-foreground: oklch(0.205 0 0);  --muted: oklch(0.97 0 0);  --muted-foreground: oklch(0.556 0 0);  --accent: oklch(0.97 0 0);  --accent-foreground: oklch(0.205 0 0);  --destructive: oklch(0.577 0.245 27.325);  --border: oklch(0.922 0 0);  --input: oklch(0.922 0 0);  --ring: oklch(0.708 0 0);  --chart-1: oklch(0.646 0.222 41.116);  --chart-2: oklch(0.6 0.118 184.704);  --chart-3: oklch(0.398 0.07 227.392);  --chart-4: oklch(0.828 0.189 84.429);  --chart-5: oklch(0.769 0.188 70.08);  --radius: 0.625rem;  --sidebar: oklch(0.985 0 0);  --sidebar-foreground: oklch(0.145 0 0);  --sidebar-primary: oklch(0.205 0 0);  --sidebar-primary-foreground: oklch(0.985 0 0);  --sidebar-accent: oklch(0.97 0 0);  --sidebar-accent-foreground: oklch(0.205 0 0);  --sidebar-border: oklch(0.922 0 0);  --sidebar-ring: oklch(0.708 0 0);}.dark {  --background: oklch(0.145 0 0);  --foreground: oklch(0.985 0 0);  --card: oklch(0.205 0 0);  --card-foreground: oklch(0.985 0 0);  --popover: oklch(0.205 0 0);  --popover-foreground: oklch(0.985 0 0);  --primary: oklch(0.922 0 0);  --primary-foreground: oklch(0.205 0 0);  --secondary: oklch(0.269 0 0);  --secondary-foreground: oklch(0.985 0 0);  --muted: oklch(0.269 0 0);  --muted-foreground: oklch(0.708 0 0);  --accent: oklch(0.269 0 0);  --accent-foreground: oklch(0.985 0 0);  --destructive: oklch(0.704 0.191 22.216);  --border: oklch(1 0 0 / 10%);  --input: oklch(1 0 0 / 15%);  --ring: oklch(0.556 0 0);  --chart-1: oklch(0.488 0.243 264.376);  --chart-2: oklch(0.696 0.17 162.48);  --chart-3: oklch(0.769 0.188 70.08);  --chart-4: oklch(0.627 0.265 303.9);  --chart-5: oklch(0.645 0.246 16.439);  --sidebar: oklch(0.205 0 0);  --sidebar-foreground: oklch(0.985 0 0);  --sidebar-primary: oklch(0.488 0.243 264.376);  --sidebar-primary-foreground: oklch(0.985 0 0);  --sidebar-accent: oklch(0.269 0 0);  --sidebar-accent-foreground: oklch(0.985 0 0);  --sidebar-border: oklch(1 0 0 / 10%);  --sidebar-ring: oklch(0.556 0 0);}Multi-Organization ABAC System Design &amp; Implementation PlanThe document outlines the design and implementation of a dynamic, multi-organization Attribute-Based Access Control (ABAC) system built on NestJS and PostgreSQL. The system provides granular authorization capabilities across hierarchical organizations with cross-organizational access controls and a comprehensive admin dashboard for policy management.1. System Architecture Overview1.1 High-Level Architecture┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐│   Admin UI      │    │   Client Apps   │    │   Mobile Apps   ││ (React NextJS)  │    │   (Various)     │    │   (Various)     │└─────────────────┘    └─────────────────┘    └─────────────────┘         │                       │                       │         └───────────────────────┼───────────────────────┘                                 │                    ┌─────────────────┐                    │   API Gateway   │                    │   (NestJS)      │                    └─────────────────┘                                 │         ┌───────────────────────┼───────────────────────┐         │                       │                       │┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐│   Auth Service  │    │   ABAC Engine   │    │ Resource Service││   (NestJS)      │    │   (NestJS)      │    │   (NestJS)      │└─────────────────┘    └─────────────────┘    └─────────────────┘         │                       │                       │         └───────────────────────┼───────────────────────┘                                 │                    ┌─────────────────┐                    │   PostgreSQL    │                    │   Database      │                    └─────────────────┘1.2 Core ComponentsAPI Gateway: Central entry point with organization routingAuthentication Service: JWT-based auth with organization contextABAC Engine: Policy evaluation and decision makingResource Service: Protected resource managementAdmin Dashboard (React NextJS): Policy and attribute management UIPolicy Decision Point (PDP): Core authorization logicPolicy Administration Point (PAP): Policy management interface2. Hierarchical Organization Model2.1 Organization StructureOrganizations support nested hierarchical structures where any organization can contain child organizations (departments, divisions, teams, etc.).Root Organization (Company)├── Sales Department│   ├── North America Sales│   │   ├── US East Coast│   │   └── US West Coast│   └── International Sales│       ├── Europe Division│       └── Asia Pacific Division├── Engineering Department│   ├── Backend Team│   ├── Frontend Team│   └── DevOps Team└── Finance Department    ├── Accounting    └── Budgeting2.2 Enhanced Database Design-- Organizations with hierarchical supportCREATE TABLE organizations (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    name VARCHAR(255) NOT NULL,    slug VARCHAR(100) NOT NULL,    parent_organization_id UUID REFERENCES organizations(id),    organization_type VARCHAR(50) NOT NULL, -- 'company', 'department', 'team', 'division'    level INTEGER DEFAULT 0, -- Hierarchy level (0 = root)    path TEXT, -- Materialized path for efficient queries (e.g., '/1/2/3/')    settings JSONB DEFAULT '{}',    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW(),    UNIQUE(parent_organization_id, slug));-- Users with enhanced organization contextCREATE TABLE users (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    primary_organization_id UUID REFERENCES organizations(id), -- Main org membership    email VARCHAR(255) UNIQUE NOT NULL,    username VARCHAR(100),    first_name VARCHAR(100),    last_name VARCHAR(100),    employee_id VARCHAR(50),    job_title VARCHAR(100),    department VARCHAR(100),    manager_id UUID REFERENCES users(id),    hire_date DATE,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- User organization memberships (many-to-many)CREATE TABLE user_organization_memberships (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    user_id UUID REFERENCES users(id),    organization_id UUID REFERENCES organizations(id),    role VARCHAR(100), -- 'member', 'admin', 'manager', 'viewer'    permissions JSONB DEFAULT '{}',    is_primary BOOLEAN DEFAULT FALSE,    joined_at TIMESTAMP DEFAULT NOW(),    UNIQUE(user_id, organization_id));-- Enhanced attribute definitions with inheritanceCREATE TABLE attribute_definitions (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    name VARCHAR(100) NOT NULL,    data_type VARCHAR(50) NOT NULL,    description TEXT,    is_global BOOLEAN DEFAULT FALSE,    is_inherited BOOLEAN DEFAULT FALSE, -- Inherited by child organizations    validation_rules JSONB,    default_value JSONB,    created_at TIMESTAMP DEFAULT NOW(),    UNIQUE(organization_id, name));-- Products (Business Object Example)CREATE TABLE products (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    name VARCHAR(255) NOT NULL,    description TEXT,    sku VARCHAR(100),    price DECIMAL(10,2),    category VARCHAR(100),    status VARCHAR(50) DEFAULT 'active', -- 'active', 'inactive', 'discontinued'    attributes JSONB DEFAULT '{}',    created_by UUID REFERENCES users(id),    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- Customers (Business Object Example)CREATE TABLE customers (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    first_name VARCHAR(100),    last_name VARCHAR(100),    company_name VARCHAR(255),    email VARCHAR(255),    phone VARCHAR(50),    address JSONB,    customer_type VARCHAR(50) DEFAULT 'individual', -- 'individual', 'business'    status VARCHAR(50) DEFAULT 'active',    credit_limit DECIMAL(10,2),    attributes JSONB DEFAULT '{}',    created_by UUID REFERENCES users(id),    assigned_to UUID REFERENCES users(id), -- Sales rep    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- Orders (Business Object Example)CREATE TABLE orders (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    order_number VARCHAR(100) UNIQUE NOT NULL,    customer_id UUID REFERENCES customers(id),    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'confirmed', 'shipped', 'delivered', 'cancelled'    total_amount DECIMAL(10,2),    currency VARCHAR(3) DEFAULT 'USD',    shipping_address JSONB,    billing_address JSONB,    attributes JSONB DEFAULT '{}',    created_by UUID REFERENCES users(id),    assigned_to UUID REFERENCES users(id), -- Order handler    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- Order ItemsCREATE TABLE order_items (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    order_id UUID REFERENCES orders(id),    product_id UUID REFERENCES products(id),    quantity INTEGER NOT NULL,    unit_price DECIMAL(10,2),    total_price DECIMAL(10,2),    attributes JSONB DEFAULT '{}');-- Transactions (Business Object Example)CREATE TABLE transactions (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    organization_id UUID REFERENCES organizations(id),    transaction_number VARCHAR(100) UNIQUE NOT NULL,    order_id UUID REFERENCES orders(id),    customer_id UUID REFERENCES customers(id),    type VARCHAR(50) NOT NULL, -- 'payment', 'refund', 'adjustment'    amount DECIMAL(10,2) NOT NULL,    currency VARCHAR(3) DEFAULT 'USD',    payment_method VARCHAR(50), -- 'credit_card', 'bank_transfer', 'cash'    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'completed', 'failed', 'cancelled'    reference_number VARCHAR(255),    attributes JSONB DEFAULT '{}',    processed_by UUID REFERENCES users(id),    processed_at TIMESTAMP,    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- Enhanced policies with hierarchical supportCREATE TABLE policies (    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),    policy_set_id UUID REFERENCES policy_sets(id),    organization_id UUID REFERENCES organizations(id),    name VARCHAR(255) NOT NULL,    description TEXT,    effect VARCHAR(10) NOT NULL CHECK (effect IN ('permit', 'deny')),    target JSONB, -- Conditions for when this policy applies    conditions JSONB, -- Additional conditions    inheritance_mode VARCHAR(20) DEFAULT 'none', -- 'none', 'inherit_down', 'inherit_up', 'both'    applies_to_children BOOLEAN DEFAULT FALSE,    is_active BOOLEAN DEFAULT TRUE,    priority INTEGER DEFAULT 0,    created_at TIMESTAMP DEFAULT NOW(),    updated_at TIMESTAMP DEFAULT NOW());-- Organization hierarchy materialized view for performanceCREATE MATERIALIZED VIEW organization_hierarchy ASWITH RECURSIVE org_tree AS (    -- Base case: root organizations    SELECT         id,        name,        slug,        parent_organization_id,        organization_type,        level,        path,        ARRAY[id] as ancestors,        0 as depth    FROM organizations     WHERE parent_organization_id IS NULL        UNION ALL        -- Recursive case: child organizations    SELECT         o.id,        o.name,        o.slug,        o.parent_organization_id,        o.organization_type,        o.level,        o.path,        ot.ancestors || o.id,        ot.depth + 1    FROM organizations o    JOIN org_tree ot ON o.parent_organization_id = ot.id)SELECT * FROM org_tree;-- Indexes for performanceCREATE INDEX idx_organizations_parent ON organizations(parent_organization_id);CREATE INDEX idx_organizations_path ON organizations USING GIST(path);CREATE INDEX idx_organizations_type ON organizations(organization_type);CREATE INDEX idx_users_organization_id ON users(organization_id);CREATE INDEX idx_users_primary_organization ON users(primary_organization_id);CREATE INDEX idx_user_org_memberships_user ON user_organization_memberships(user_id);CREATE INDEX idx_user_org_memberships_org ON user_organization_memberships(organization_id);CREATE INDEX idx_products_organization ON products(organization_id);CREATE INDEX idx_customers_organization ON customers(organization_id);CREATE INDEX idx_orders_organization ON orders(organization_id);CREATE INDEX idx_transactions_organization ON transactions(organization_id);CREATE INDEX idx_policies_organization ON policies(organization_id);CREATE INDEX idx_policies_inheritance ON policies(applies_to_children) WHERE applies_to_children = TRUE;3. Enhanced ABAC Implementation3.1 Hierarchical Policy Evaluation// Enhanced ABAC service with hierarchical support@Injectable()export class HierarchicalAbacService {  constructor(    @InjectRepository(Policy) private policyRepo: Repository&lt;Policy&gt;,    @InjectRepository(Organization) private orgRepo: Repository&lt;Organization&gt;,    private readonly organizationService: OrganizationService,    private readonly policyEvaluator: PolicyEvaluatorService,  ) {}  async authorize(request: AuthorizationRequest): Promise&lt;AuthorizationResponse&gt; {    const context = await this.buildHierarchicalContext(request);    const applicablePolicies = await this.findHierarchicalPolicies(context);        return this.evaluatePolicies(applicablePolicies, context);  }  private async buildHierarchicalContext(request: AuthorizationRequest): Promise&lt;AuthorizationContext&gt; {    const user = await this.userService.findById(request.userId);    const userOrganizations = await this.getUserOrganizations(request.userId);    const organizationHierarchy = await this.getOrganizationHierarchy(request.organizationId);        const userAttributes = await this.getUserAttributes(request.userId);    const resourceAttributes = await this.getResourceAttributes(request.resourceId);    const environmentAttributes = this.getEnvironmentAttributes(request);    return {      user: {        id: request.userId,        organizationId: request.organizationId,        primaryOrganizationId: user.primaryOrganizationId,        organizationMemberships: userOrganizations,        organizationHierarchy,        attributes: userAttributes,      },      resource: {        id: request.resourceId,        type: request.resourceType,        organizationId: request.resourceOrganizationId,        attributes: resourceAttributes,      },      environment: environmentAttributes,      action: request.action,    };  }  private async findHierarchicalPolicies(context: AuthorizationContext): Promise&lt;Policy[]&gt; {    // Get all ancestor and descendant organizations    const orgHierarchy = context.user.organizationHierarchy;    const relevantOrgIds = [      context.user.organizationId,      ...orgHierarchy.ancestors,      ...orgHierarchy.descendants,    ];    const query = this.policyRepo      .createQueryBuilder('policy')      .leftJoinAndSelect('policy.rules', 'rules')      .leftJoinAndSelect('policy.organization', 'org')      .where('policy.isActive = true')      .andWhere(        '(policy.organizationId = :currentOrgId OR ' +        '(policy.organizationId IN (:...ancestorIds) AND policy.appliesTo Children = true) OR ' +        '(policy.organizationId IN (:...descendantIds) AND policy.inheritanceMode IN (:...inheritanceModes)))',        {          currentOrgId: context.user.organizationId,          ancestorIds: orgHierarchy.ancestors,          descendantIds: orgHierarchy.descendants,          inheritanceModes: ['inherit_up', 'both'],        }      )      .orderBy('org.level', 'ASC') // Evaluate from root to leaf      .addOrderBy('policy.priority', 'DESC');    const policies = await query.getMany();        return policies.filter(policy =&gt;       this.policyEvaluator.isApplicable(policy, context)    );  }  private async getUserOrganizations(userId: string): Promise&lt;UserOrganizationMembership[]&gt; {    return this.userOrgRepo      .createQueryBuilder('membership')      .leftJoinAndSelect('membership.organization', 'org')      .where('membership.userId = :userId', { userId })      .getMany();  }  private async getOrganizationHierarchy(organizationId: string): Promise&lt;OrganizationHierarchy&gt; {    const org = await this.orgRepo.findOne({       where: { id: organizationId },      relations: ['parent', 'children']     });    if (!org) {      throw new Error('Organization not found');    }    const ancestors = await this.getAncestors(organizationId);    const descendants = await this.getDescendants(organizationId);    return {      current: org,      ancestors: ancestors.map(a =&gt; a.id),      descendants: descendants.map(d =&gt; d.id),      level: org.level,      path: org.path,    };  }}// Enhanced Policy Evaluator with hierarchical conditions@Injectable()export class HierarchicalPolicyEvaluatorService extends PolicyEvaluatorService {  evaluateConditions(conditions: PolicyCondition[], context: AuthorizationContext): boolean {    if (!conditions || conditions.length === 0) return true;    return conditions.every(condition =&gt; {      switch (condition.operator) {        case 'equals':          return this.getAttributeValue(condition.attribute, context) === condition.value;        case 'in':          return condition.value.includes(this.getAttributeValue(condition.attribute, context));        case 'greater_than':          return this.getAttributeValue(condition.attribute, context) &gt; condition.value;        case 'regex':          return new RegExp(condition.value).test(this.getAttributeValue(condition.attribute, context));        case 'time_in_range':          return this.isTimeInRange(condition.value, new Date());        case 'organization_level':          return this.evaluateOrganizationLevel(condition, context);        case 'organization_type':          return this.evaluateOrganizationType(condition, context);        case 'in_organization_hierarchy':          return this.evaluateOrganizationHierarchy(condition, context);        case 'has_role_in_organization':          return this.evaluateRoleInOrganization(condition, context);        default:          return false;      }    });  }  private evaluateOrganizationLevel(condition: PolicyCondition, context: AuthorizationContext): boolean {    const userOrgLevel = context.user.organizationHierarchy.level;    const requiredLevel = condition.value;        switch (condition.comparison || 'equals') {      case 'equals': return userOrgLevel === requiredLevel;      case 'greater_than': return userOrgLevel &gt; requiredLevel;      case 'less_than': return userOrgLevel &lt; requiredLevel;      case 'greater_than_or_equal': return userOrgLevel &gt;= requiredLevel;      case 'less_than_or_equal': return userOrgLevel &lt;= requiredLevel;      default: return false;    }  }  private evaluateOrganizationType(condition: PolicyCondition, context: AuthorizationContext): boolean {    const userOrgType = context.user.organizationHierarchy.current.organizationType;    return condition.value.includes(userOrgType);  }  private evaluateOrganizationHierarchy(condition: PolicyCondition, context: AuthorizationContext): boolean {    const targetOrgId = condition.value;    const userHierarchy = context.user.organizationHierarchy;        return userHierarchy.ancestors.includes(targetOrgId) ||            userHierarchy.descendants.includes(targetOrgId) ||           userHierarchy.current.id === targetOrgId;  }  private evaluateRoleInOrganization(condition: PolicyCondition, context: AuthorizationContext): boolean {    const { organizationId, role } = condition.value;    const membership = context.user.organizationMemberships.find(      m =&gt; m.organizationId === organizationId    );        return membership?.role === role;  }}4. Admin Dashboard Requirements4.1 Functional RequirementsOrganization ManagementOrganization Hierarchy ManagementCreate, edit, delete organizations with parent-child relationshipsVisual tree view of organization hierarchy with drag-and-drop reorderingOrganization type management (company, department, team, division)Bulk organization operations (move, merge, archive)Organization settings and configuration managementUser ManagementUser CRUD OperationsCreate, read, update, delete users with organization assignmentsMulti-organization membership managementRole assignment within organizationsUser attribute management with inheritance visualizationBulk user operations (import, export, bulk edit)User search and filtering across organization hierarchyABAC ManagementPolicy ManagementVisual policy builder with drag-and-drop conditionsPolicy templates library with parameterizationPolicy inheritance configuration (applies to children, inheritance modes)Policy testing sandbox with real-time evaluationPolicy versioning and rollback capabilitiesBulk policy operationsAttribute ManagementAttribute definition creation with data types and validationAttribute inheritance configurationAttribute value management for users and resourcesAttribute template system for common patternsResource ManagementBusiness object CRUD (Products, Orders, Customers, Transactions)Resource attribute managementResource access control visualizationResource sharing across organizationsCross-Organization FeaturesPermission ManagementGrant/revoke cross-organization permissionsTime-bound permission managementPermission delegation workflowsCross-organization audit trails4.2 Non-Functional RequirementsPerformanceSupport 10,000+ concurrent users across 1,000+ organizationsPolicy evaluation response time &lt; 100ms for 95th percentileDashboard page load time &lt; 2 secondsReal-time updates using WebSocket connectionsEfficient caching with Redis for frequently accessed dataScalabilityHorizontal scaling support for multiple admin instancesDatabase sharding capability for large organization hierarchiesMicroservice architecture readinessCDN integration for static assetsSecurityRole-based access control for admin functionsAudit logging for all administrative actionsData encryption at rest and in transitRate limiting and DDoS protectionOWASP security complianceUsabilityResponsive design supporting mobile and tablet devicesInternationalization (i18n) support for multiple languagesAccessibility compliance (WCAG 2.1 AA)Comprehensive help system and documentationKeyboard navigation supportTechnology StackFrontend: React 18+ with NextJS 13+, TypeScriptUI Components: SHADCN/UI with Radix UI primitivesStyling: Tailwind CSS with custom design systemState Management: Zustand for client state, React Query for server stateForms: React Hook Form with Zod validationCharts: Recharts for analytics and visualizationIcons: Lucide React icon library5. Demo Data and Example Implementation5.1 Fictional OrganizationsOrganization 1: TechCorp Global// Organization Structureconst techCorpStructure = {  id: 'org-1',  name: 'TechCorp Global',  type: 'company',  children: [    {      id: 'org-1-1',      name: 'Engineering Division',      type: 'division',      children: [        { id: 'org-1-1-1', name: 'Backend Team', type: 'team' },        { id: 'org-1-1-2', name: 'Frontend Team', type: 'team' },        { id: 'org-1-1-3', name: 'DevOps Team', type: 'team' },        { id: 'org-1-1-4', name: 'QA Team', type: 'team' }      ]    },    {      id: 'org-1-2',      name: 'Sales Division',      type: 'division',      children: [        { id: 'org-1-2-1', name: 'Enterprise Sales', type: 'team' },        { id: 'org-1-2-2', name: 'SMB Sales', type: 'team' },        { id: 'org-1-2-3', name: 'Customer Success', type: 'team' }      ]    },    {      id: 'org-1-3',      name: 'Finance Department',      type: 'department',      children: [        { id: 'org-1-3-1', name: 'Accounting', type: 'team' },        { id: 'org-1-3-2', name: 'FP&amp;A', type: 'team' }      ]    }  ]};// Sample Usersconst techCorpUsers = [  {    id: 'user-1',    email: 'john.doe@techcorp.com',    firstName: 'John',    lastName: 'Doe',    jobTitle: 'Engineering Manager',    primaryOrganizationId: 'org-1-1',    organizationMemberships: [      { organizationId: 'org-1', role: 'member' },      { organizationId: 'org-1-1', role: 'manager' },      { organizationId: 'org-1-1-1', role: 'admin' }    ],    attributes: {      securityClearance: 'high',      department: 'engineering',      costCenter: 'ENG-001',      seniority: 'senior'    }  },  {    id: 'user-2',    email: 'jane.smith@techcorp.com',    firstName: 'Jane',    lastName: 'Smith',    jobTitle: 'Sales Director',    primaryOrganizationId: 'org-1-2',    organizationMemberships: [      { organizationId: 'org-1', role: 'member' },      { organizationId: 'org-1-2', role: 'admin' },      { organizationId: 'org-1-2-1', role: 'manager' }    ],    attributes: {      securityClearance: 'medium',      department: 'sales',      costCenter: 'SALES-001',      seniority: 'senior',      quota: 1000000    }  }];// Sample Productsconst techCorpProducts = [  {    id: 'prod-1',    organizationId: 'org-1',    name: 'CloudSync Pro',    sku: 'CS-PRO-001',    price: 299.99,    category: 'Software',    status: 'active',    attributes: {      securityLevel: 'enterprise',      targetMarket: 'b2b',      supportTier: 'premium'    }  },  {    id: 'prod-2',    organizationId: 'org-1',    name: 'DataVault Basic',    sku: 'DV-BAS-001',    price: 99.99,    category: 'Software',    status: 'active',    attributes: {      securityLevel: 'standard',      targetMarket: 'smb',      supportTier: 'standard'    }  }];Organization 2: RetailMax Enterprises// Organization Structureconst retailMaxStructure = {  id: 'org-2',  name: 'RetailMax Enterprises',  type: 'company',  children: [    {      id: 'org-2-1',      name: 'Operations Division',      type: 'division',      children: [        { id: 'org-2-1-1', name: 'Store Operations', type: 'department' },        { id: 'org-2-1-2', name: 'Supply Chain', type: 'department' },        { id: 'org-2-1-3', name: 'Inventory Management', type: 'department' }      ]    },    {      id: 'org-2-2',      name: 'Regional Stores',      type: 'division',      children: [        { id: 'org-2-2-1', name: 'North Region', type: 'region' },        { id: 'org-2-2-2', name: 'South Region', type: 'region' },        { id: 'org-2-2-3', name: 'East Region', type: 'region' },        { id: 'org-2-2-4', name: 'West Region', type: 'region' }      ]    },    {      id: 'org-2-3',      name: 'Corporate Services',      type: 'division',      children: [        { id: 'org-2-3-1', name: 'HR Department', type: 'department' },        { id: 'org-2-3-2', name: 'IT Department', type: 'department' },        { id: 'org-2-3-3', name: 'Marketing Department', type: 'department' }      ]    }  ]};// Sample Usersconst retailMaxUsers = [  {    id: 'user-3',    email: 'bob.wilson@retailmax.com',    firstName: 'Bob',    lastName: 'Wilson',    jobTitle: 'Regional Manager',    primaryOrganizationId: 'org-2-2-1',    organizationMemberships: [      { organizationId: 'org-2', role: 'member' },      { organizationId: 'org-2-2', role: 'member' },      { organizationId: 'org-2-2-1', role: 'admin' }    ],    attributes: {      accessLevel: 'regional',      department: 'operations',      region: 'north',      managerLevel: 2    }  },  {    id: 'user-4',    email: 'alice.brown@retailmax.com',    firstName: 'Alice',    lastName: 'Brown',    jobTitle: 'Store Manager',    primaryOrganizationId: 'org-2-2-1',    organizationMemberships: [      { organizationId: 'org-2', role: 'member' },      { organizationId: 'org-2-2-1', role: 'member' }    ],    attributes: {      accessLevel: 'store',      department: 'operations',      region: 'north',      storeId: 'store-001',      managerLevel: 1    }  }];// Sample Productsconst retailMaxProducts = [  {    id: 'prod-3',    organizationId: 'org-2',    name: 'Premium Coffee Beans',    sku: 'PCB-001',    price: 24.99,    category: 'Food &amp; Beverage',    status: 'active',    attributes: {      perishable: true,      supplier: 'GlobalCoffee Inc',      margin: 0.35,      seasonality: 'none'    }  },  {    id: 'prod-4',    organizationId: 'org-2',    name: 'Wireless Headphones',    sku: 'WH-PRO-001',    price: 149.99,    category: 'Electronics',    status: 'active',    attributes: {      perishable: false,      supplier: 'TechSupplier Ltd',      margin: 0.50,      seasonality: 'holiday'    }  }];5.2 Example Policy ImplementationsTechCorp Policiesconst techCorpPolicies = [  {    id: 'policy-tc-1',    name: 'Engineering Read Access',    organizationId: 'org-1-1', // Engineering Division    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: 'product',      action: 'read'    },    conditions: [      {        attribute: 'user.department',        operator: 'equals',        value: 'engineering'      }    ],    priority: 100  },  {    id: 'policy-tc-2',    name: 'Senior Engineer Product Management',    organizationId: 'org-1-1',    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: 'product',      action: ['create', 'update']    },    conditions: [      {        attribute: 'user.department',        operator: 'equals',        value: 'engineering'      },      {        attribute: 'user.seniority',        operator: 'in',        value: ['senior', 'principal', 'staff']      },      {        attribute: 'user.securityClearance',        operator: 'in',        value: ['medium', 'high']      }    ],    priority: 200  },  {    id: 'policy-tc-3',    name: 'Sales Team Customer Access',    organizationId: 'org-1-2', // Sales Division    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: 'customer',      action: ['read', 'update']    },    conditions: [      {        attribute: 'user.department',        operator: 'equals',        value: 'sales'      },      {        attribute: 'resource.assignedTo',        operator: 'equals',        value: '${user.id}' // Dynamic reference      }    ],    priority: 150  },  {    id: 'policy-tc-4',    name: 'High Value Order Approval',    organizationId: 'org-1',    appliesToChildren: true,    effect: 'deny',    target: {      resourceType: 'order',      action: 'approve'    },    conditions: [      {        attribute: 'resource.totalAmount',        operator: 'greater_than',        value: 50000      },      {        attribute: 'user.organizationLevel',        operator: 'greater_than',        value: 2 // Only level 2+ can approve      }    ],    priority: 300  },  {    id: 'policy-tc-5',    name: 'Finance Department Transaction Access',    organizationId: 'org-1-3', // Finance Department    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: 'transaction',      action: ['read', 'create', 'update']    },    conditions: [      {        attribute: 'user.department',        operator: 'equals',        value: 'finance'      }    ],    priority: 180  }];RetailMax Policiesconst retailMaxPolicies = [  {    id: 'policy-rm-1',    name: 'Regional Manager Full Access',    organizationId: 'org-2-2', // Regional Stores    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: ['product', 'customer', 'order', 'transaction'],      action: ['read', 'create', 'update']    },    conditions: [      {        attribute: 'user.jobTitle',        operator: 'equals',        value: 'Regional Manager'      },      {        attribute: 'user.accessLevel',        operator: 'in',        value: ['regional', 'corporate']      }    ],    priority: 200  },  {    id: 'policy-rm-2',    name: 'Store Manager Limited Access',    organizationId: 'org-2-2',    appliesToChildren: true,    effect: 'permit',    target: {      resourceType: ['product', 'customer', 'order'],      action: ['read', 'update']    },    conditions: [      {        attribute: 'user.jobTitle',        operator: 'equals',        value: 'Store Manager'      },      {        attribute: 'user.region',        operator: 'equals',        value: '${resource.region}' // Can only access resources in their region      }    ],    priority: 150  },  {    id: 'policy-rm-3',    name: 'High Value Transaction Restriction',    organizationId: 'org-2',    appliesToChildren: true,    effect: 'deny',    target: {      resourceType: 'transaction',      action: 'create'    },    conditions: [      {        attribute: 'resource.amount',        operator: 'greater_than',        value: 10000      },      {        attribute: 'user.managerLevel',        operator: 'less_than',        value: 2      }    ],    priority: 300  },  {    id: 'policy-rm-4',    name: 'Perishable Product Management',    organizationId: 'org-2-1-2', // Supply Chain    appliesToChildren: false,    effect: 'permit',    target: {      resourceType: 'product',      action: ['create', 'update', 'delete']    },    conditions: [      {        attribute: 'resource.perishable',        operator: 'equals',        value: true      },      {        attribute: 'user.department',        operator: 'equals',        value: 'operations'      },      {        attribute: 'environment.time',        operator: 'time_in_range',        value: { start: '06:00', end: '18:00' } // Business hours only      }    ],    priority: 250  }];InstructionI want to develop this platform and test itCreate all the needed resources for building this project with claude-codeUse this document for detailed and complementary informationCreate all the todo.md tasks very detailed and follow the instructions and information in this documentMake sure to referenced all the resources in the claude.md file. I will add this document to the resources folder in the project, reference this document also in the claude.md file. Create a developer guide to build this project. Make sure to write the actions the developer need to do or take assuming using claude-code and these instructions and resources, and not general development guide and tasks. Just the necessary minimal actions. Prepare the resources for developing with claude-code and vs-code. Create only the resources needed for development in vs-code IDE. Leave the other arifcats to be created by claude-code while developing the entire project. For example, don’t create the .env, or docker-compose.yaml files, they will be created with claude-code, based on the claude.md, todo.md and all the other resources that you should create. Make sure we have all the necessary resources and instructions for building the project exactly as described.