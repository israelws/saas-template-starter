import { MigrationInterface, QueryRunner } from "typeorm";

export class AddTaskManagementSystem1755168268041 implements MigrationInterface {
    name = 'AddTaskManagementSystem1755168268041'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP CONSTRAINT "FK_policy_set_organization"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP CONSTRAINT "FK_policy_organization"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP CONSTRAINT "FK_policy_set"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_transaction_organization"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_transaction_customer"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_transaction_order"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP CONSTRAINT "FK_customer_organization"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_order_organization"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_order_customer"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_order_item_order"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_order_item_product"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_product_organization"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "FK_organizations_parent"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "FK_user_attributes_userId"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "FK_user_attributes_organizationId"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "FK_aca56d173ca9d224cd5e5cf5b14"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "FK_membership_user"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "FK_membership_organization"`);
        await queryRunner.query(`ALTER TABLE "task_lifecycle_events" DROP CONSTRAINT "FK_task_lifecycle_events_task_type"`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP CONSTRAINT "FK_task_history_task"`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP CONSTRAINT "FK_task_history_user"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_tasks_task_type"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_tasks_assignee"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_tasks_created_by"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_tasks_organization"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_tasks_parent"`);
        await queryRunner.query(`ALTER TABLE "task_types" DROP CONSTRAINT "FK_task_types_organization"`);
        await queryRunner.query(`ALTER TABLE "territories" DROP CONSTRAINT "FK_a61b0d61295ff832595b91d0708"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_invitation_organization"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_invitation_invited_by"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_invitation_accepted_user"`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" DROP CONSTRAINT "FK_0a7d13e636c056d4f4036f5c46c"`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" DROP CONSTRAINT "FK_b91463b11cba66b27dc4a4bd20d"`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" DROP CONSTRAINT "FK_130a8c8b2e9dfd72459b8411f3b"`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" DROP CONSTRAINT "FK_657daaed8ff2e07f9176b935a1b"`);
        await queryRunner.query(`ALTER TABLE "email_service_configs" DROP CONSTRAINT "FK_email_service_configs_organization"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP CONSTRAINT "FK_attribute_organization"`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" DROP CONSTRAINT "FK_closure_ancestor"`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" DROP CONSTRAINT "FK_closure_descendant"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_policy_field_rules_lookup"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_policies_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_policies_scope"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_policies_scope_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."idx_policies_org_active"`);
        await queryRunner.query(`DROP INDEX "public"."idx_policies_priority"`);
        await queryRunner.query(`DROP INDEX "public"."idx_policies_policyset"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_customerId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_organizationId_status"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_orderId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_transactions_referenceNumber"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_customers_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_customers_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_customers_email"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_orders_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_orders_customerId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_orders_orderDate"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_order_items_orderId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_products_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_products_sku"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_products_category"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_products_variants"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_organizations_parentId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_attributes_userId_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_attributes_organizationId_key"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_attributes_value"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_attributes_public"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_users_email"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_users_cognitoId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_memberships_userId_isDefault"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_memberships_userId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_memberships_organizationId"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_roles_user_org"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_user_roles_org_role"`);
        await queryRunner.query(`DROP INDEX "public"."UQ_user_roles_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_task_lifecycle_events_task_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_task_history_task"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_task_history_user"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_tasks_organization"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_tasks_assignee"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_tasks_status"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_tasks_priority"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_tasks_due_date"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_task_types_organization"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_task_types_scope"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_territories_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_territories_parent"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_invitation_email_organization"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_invitation_token"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_invitation_status"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_insurance_agents_user"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_insurance_agents_branch"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_insurance_agents_license"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_insurance_branches_org"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_insurance_branches_manager"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_email_service_configs_provider_org"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_email_service_configs_provider_null"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_attribute_definitions_key"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_organization_closure_ancestor"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_organization_closure_descendant"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "UQ_product_sku_org"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "UQ_user_attributes_user_org_key"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "UQ_user_org_membership"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP CONSTRAINT "UQ_attribute_key_org"`);
        await queryRunner.query(`CREATE TABLE "refresh_tokens" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "createdBy" character varying(255), "updatedBy" character varying(255), "token" character varying NOT NULL, "userId" uuid NOT NULL, "expiresAt" TIMESTAMP NOT NULL, "revokedAt" TIMESTAMP, "revokedReason" character varying, "userAgent" character varying, "ipAddress" character varying, CONSTRAINT "UQ_4542dd2f38a61354a040ba9fd57" UNIQUE ("token"), CONSTRAINT "PK_7d8bee0204106019488c4c50ffa" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_ca9661360d25617cc14c77ad32" ON "refresh_tokens" ("token", "userId") `);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "priority"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "status"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "balanceAfter"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "phone"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "address"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "attributes"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "totalAmount"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "totalPrice"`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "stockQuantity"`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "type"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "status"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP COLUMN "organization_id"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "attributes"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "status"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "deletedAt"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "required"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "validationRules"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "is_system"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "is_required"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        // First, add the column as nullable
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD COLUMN IF NOT EXISTS "name" character varying(255)`);
        // Set a default value for existing rows
        await queryRunner.query(`UPDATE "policy_sets" SET "name" = COALESCE("name", CONCAT('PolicySet_', "id")) WHERE "name" IS NULL`);
        // Now make it NOT NULL
        await queryRunner.query(`ALTER TABLE "policy_sets" ALTER COLUMN "name" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ALTER COLUMN "organizationId" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" DROP COLUMN "permission"`);
        await queryRunner.query(`CREATE TYPE "public"."policy_field_rules_permission_enum" AS ENUM('read', 'write', 'deny')`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" ADD "permission" "public"."policy_field_rules_permission_enum" NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "policy_field_rules"."permission" IS 'read, write, or deny'`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        // First, add the column as nullable
        await queryRunner.query(`ALTER TABLE "policies" ADD COLUMN IF NOT EXISTS "name" character varying(255)`);
        // Set a default value for existing rows
        await queryRunner.query(`UPDATE "policies" SET "name" = COALESCE("name", CONCAT('Policy_', "id")) WHERE "name" IS NULL`);
        // Now make it NOT NULL
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "name" SET NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."policy_scope_enum" RENAME TO "policy_scope_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."policies_scope_enum" AS ENUM('system', 'organization')`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" TYPE "public"."policies_scope_enum" USING "scope"::"text"::"public"."policies_scope_enum"`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" SET DEFAULT 'organization'`);
        await queryRunner.query(`DROP TYPE "public"."policy_scope_enum_old"`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "subjects" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "resources" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "actions" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "conditions" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "type"`);
        await queryRunner.query(`CREATE TYPE "public"."transactions_type_enum" AS ENUM('payment', 'refund', 'adjustment', 'credit', 'debit')`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "type" "public"."transactions_type_enum" NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."transactions_status_enum" AS ENUM('pending', 'processing', 'completed', 'failed', 'cancelled', 'reversed')`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "status" "public"."transactions_status_enum" NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "transactions" ALTER COLUMN "currency" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "paymentMethod"`);
        await queryRunner.query(`CREATE TYPE "public"."transactions_paymentmethod_enum" AS ENUM('credit_card', 'debit_card', 'bank_transfer', 'paypal', 'stripe', 'check', 'cash', 'other')`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "paymentMethod" "public"."transactions_paymentmethod_enum"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "UQ_reference_number"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "referenceNumber"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "referenceNumber" character varying(100)`);
        await queryRunner.query(`ALTER TABLE "transactions" ALTER COLUMN "metadata" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "type"`);
        await queryRunner.query(`CREATE TYPE "public"."customers_type_enum" AS ENUM('individual', 'business')`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "type" "public"."customers_type_enum" NOT NULL`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."customers_status_enum" AS ENUM('active', 'inactive', 'suspended', 'blacklisted')`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "status" "public"."customers_status_enum" NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "firstName"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "firstName" character varying(100)`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "lastName"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "lastName" character varying(100)`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "email" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "customers" ALTER COLUMN "currency" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "UQ_order_number"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "orderNumber"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "orderNumber" character varying(50) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "UQ_59b0c3b34ea0fa5562342f24143" UNIQUE ("orderNumber")`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."orders_status_enum" AS ENUM('draft', 'pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded')`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "status" "public"."orders_status_enum" NOT NULL DEFAULT 'draft'`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "paymentStatus"`);
        await queryRunner.query(`CREATE TYPE "public"."orders_paymentstatus_enum" AS ENUM('pending', 'paid', 'partial', 'failed', 'refunded')`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "paymentStatus" "public"."orders_paymentstatus_enum" NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "orderDate" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "orderDate" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "shippingAddress"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "shippingAddress" jsonb NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "billingAddress" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "shippingMethod"`);
        await queryRunner.query(`CREATE TYPE "public"."orders_shippingmethod_enum" AS ENUM('standard', 'express', 'overnight', 'pickup')`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "shippingMethod" "public"."orders_shippingmethod_enum" NOT NULL DEFAULT 'standard'`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "subtotal" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "subtotal" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "tax" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "shipping" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "discount" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "total" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "total" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "currency" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "discount" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "tax" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "total" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "total" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "sku"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "sku" character varying(100) NOT NULL`);
        // First, add the column as nullable
        await queryRunner.query(`ALTER TABLE "products" ADD COLUMN IF NOT EXISTS "name" character varying(255)`);
        // Set a default value for existing rows
        await queryRunner.query(`UPDATE "products" SET "name" = COALESCE("name", CONCAT('Product_', "id")) WHERE "name" IS NULL`);
        // Now make it NOT NULL
        await queryRunner.query(`ALTER TABLE "products" ALTER COLUMN "name" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "category"`);
        await queryRunner.query(`CREATE TYPE "public"."products_category_enum" AS ENUM('electronics', 'software', 'services', 'hardware', 'subscription', 'other')`);
        await queryRunner.query(`ALTER TABLE "products" ADD "category" "public"."products_category_enum" NOT NULL DEFAULT 'other'`);
        await queryRunner.query(`ALTER TABLE "products" ALTER COLUMN "currency" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."products_status_enum" AS ENUM('active', 'inactive', 'discontinued', 'draft')`);
        await queryRunner.query(`ALTER TABLE "products" ADD "status" "public"."products_status_enum" NOT NULL DEFAULT 'draft'`);
        await queryRunner.query(`ALTER TABLE "products" ALTER COLUMN "attributes" DROP DEFAULT`);
        
        // Drop the materialized view that depends on organizations columns
        await queryRunner.query(`DROP MATERIALIZED VIEW IF EXISTS "organization_hierarchy_view"`);
        
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        // First, add the column as nullable
        await queryRunner.query(`ALTER TABLE "organizations" ADD COLUMN IF NOT EXISTS "name" character varying(255)`);
        // Set a default value for existing rows
        await queryRunner.query(`UPDATE "organizations" SET "name" = COALESCE("name", CONCAT('Organization_', "id")) WHERE "name" IS NULL`);
        // Now make it NOT NULL
        await queryRunner.query(`ALTER TABLE "organizations" ALTER COLUMN "name" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "type"`);
        await queryRunner.query(`CREATE TYPE "public"."organizations_type_enum" AS ENUM('company', 'division', 'department', 'team', 'insurance_agency', 'insurance_branch')`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "type" "public"."organizations_type_enum" NOT NULL DEFAULT 'company'`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "UQ_organizations_code"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "code"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "code" character varying(50)`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "UQ_7e27c3b62c681fbe3e2322535f2" UNIQUE ("code")`);
        await queryRunner.query(`ALTER TABLE "organizations" ALTER COLUMN "settings" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "organizations" ALTER COLUMN "isActive" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ALTER COLUMN "valid_from" SET DEFAULT now()`);
        // Drop the views that depend on user_attributes columns
        await queryRunner.query(`DROP VIEW IF EXISTS "user_attribute_stats" CASCADE`);
        await queryRunner.query(`DROP VIEW IF EXISTS "user_attribute_summary" CASCADE`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_users_cognitoId"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "cognitoId"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "cognitoId" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_b1679ad39627f7359fbb8405c66" UNIQUE ("cognitoId")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_users_email"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email")`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "firstName"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "firstName" character varying(100) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "lastName"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "lastName" character varying(100) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."users_status_enum" AS ENUM('active', 'inactive', 'suspended', 'pending')`);
        await queryRunner.query(`ALTER TABLE "users" ADD "status" "public"."users_status_enum" NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "attributes" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "emailVerified" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "role"`);
        await queryRunner.query(`CREATE TYPE "public"."user_organization_memberships_role_enum" AS ENUM('super_admin', 'admin', 'manager', 'user', 'guest')`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "role" "public"."user_organization_memberships_role_enum" NOT NULL DEFAULT 'user'`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "permissions" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "isDefault" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "isActive" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "startDate"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "startDate" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "endDate"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "endDate" TIMESTAMP WITH TIME ZONE`);
        await queryRunner.query(`ALTER TABLE "user_roles" ALTER COLUMN "assigned_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_roles" ALTER COLUMN "valid_from" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP COLUMN "fromLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD "fromLifecycleEventId" character varying`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP COLUMN "toLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD "toLifecycleEventId" character varying`);
        await queryRunner.query(`ALTER TYPE "public"."task_status_enum" RENAME TO "task_status_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."tasks_status_enum" AS ENUM('pending', 'in_progress', 'completed', 'cancelled', 'on_hold')`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" TYPE "public"."tasks_status_enum" USING "status"::"text"::"public"."tasks_status_enum"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."task_status_enum_old"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP COLUMN "currentLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD "currentLifecycleEventId" character varying`);
        await queryRunner.query(`ALTER TYPE "public"."task_priority_enum" RENAME TO "task_priority_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."tasks_priority_enum" AS ENUM('low', 'medium', 'high', 'urgent')`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" TYPE "public"."tasks_priority_enum" USING "priority"::"text"::"public"."tasks_priority_enum"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" SET DEFAULT 'medium'`);
        await queryRunner.query(`DROP TYPE "public"."task_priority_enum_old"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "tags" SET NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."task_type_scope_enum" RENAME TO "task_type_scope_enum_old"`);
        await queryRunner.query(`CREATE TYPE "public"."task_types_scope_enum" AS ENUM('system', 'organization')`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" TYPE "public"."task_types_scope_enum" USING "scope"::"text"::"public"."task_types_scope_enum"`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" SET DEFAULT 'organization'`);
        await queryRunner.query(`DROP TYPE "public"."task_type_scope_enum_old"`);
        await queryRunner.query(`ALTER TABLE "territories" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "territories" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "key"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "key" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD CONSTRAINT "UQ_0343fd5c80d17db91101119df88" UNIQUE ("key")`);
        // First, add the column as nullable
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD COLUMN IF NOT EXISTS "name" character varying(255)`);
        // Set a default value for existing rows
        await queryRunner.query(`UPDATE "attribute_definitions" SET "name" = COALESCE("name", CONCAT('Attribute_', "id")) WHERE "name" IS NULL`);
        // Now make it NOT NULL
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ALTER COLUMN "name" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "category"`);
        await queryRunner.query(`CREATE TYPE "public"."attribute_definitions_category_enum" AS ENUM('user', 'resource', 'environment', 'action')`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "category" "public"."attribute_definitions_category_enum" NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "type"`);
        await queryRunner.query(`CREATE TYPE "public"."attribute_definitions_type_enum" AS ENUM('string', 'number', 'boolean', 'date', 'array', 'object')`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "type" "public"."attribute_definitions_type_enum" NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "data_type"`);
        await queryRunner.query(`CREATE TYPE "public"."attribute_definitions_data_type_enum" AS ENUM('string', 'number', 'boolean', 'date', 'array', 'object')`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "data_type" "public"."attribute_definitions_data_type_enum" NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ALTER COLUMN "isRequired" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ALTER COLUMN "isSystem" SET NOT NULL`);
        await queryRunner.query(`CREATE INDEX "IDX_065c59d0e8b46249d2381ff507" ON "policy_sets" ("organizationId", "isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_56869fc174a32ffb9af041a8e6" ON "policy_field_rules" ("policy_id", "resource_type", "field_name") `);
        await queryRunner.query(`CREATE INDEX "IDX_2097a324a987f6d0b56087b526" ON "policies" ("policySetId") `);
        await queryRunner.query(`CREATE INDEX "IDX_4858b98abb23a6657c2e0ad23b" ON "policies" ("priority") `);
        await queryRunner.query(`CREATE INDEX "IDX_04c689b4216fd28fe953e6850a" ON "policies" ("organizationId", "isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_c86f4b96160cac09f788303b8a" ON "transactions" ("referenceNumber") `);
        await queryRunner.query(`CREATE INDEX "IDX_2d5fa024a84dceb158b2b95f34" ON "transactions" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_2fdbbae70ff802bc8b703ee7c5" ON "transactions" ("orderId") `);
        await queryRunner.query(`CREATE INDEX "IDX_52a272e6c6a006922bc80d7e19" ON "transactions" ("customerId") `);
        await queryRunner.query(`CREATE INDEX "IDX_01755e991f5e1de30dc512e7a4" ON "transactions" ("organizationId", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_dd44f67433aadad2785aecd5be" ON "customers" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_99ae4942e9ee8d0381dc7cfc09" ON "customers" ("email", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_a7225962aabeb63f70e6abc3fb" ON "customers" ("organizationId", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_a1bb11e2ea78aa609b5cb3127c" ON "orders" ("orderDate") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_59b0c3b34ea0fa5562342f2414" ON "orders" ("orderNumber") `);
        await queryRunner.query(`CREATE INDEX "IDX_e5de51ca888d8b1f5ac25799dd" ON "orders" ("customerId") `);
        await queryRunner.query(`CREATE INDEX "IDX_00c2f0cb222413532c3546aa15" ON "orders" ("organizationId", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_cdb99c05982d5191ac8465ac01" ON "order_items" ("productId") `);
        await queryRunner.query(`CREATE INDEX "IDX_f1d359a55923bb45b057fbdab0" ON "order_items" ("orderId") `);
        await queryRunner.query(`CREATE INDEX "IDX_c3932231d2385ac248d0888d95" ON "products" ("category") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_ec69270b0e2426173c0ec4b73c" ON "products" ("sku", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_5b38e905567dafe7dac9e8bdf1" ON "products" ("organizationId", "status") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_c9b546a5c94d422624b3d8a27f" ON "organizations" ("code") WHERE code IS NOT NULL`);
        await queryRunner.query(`CREATE INDEX "IDX_e94093b7608688ada3503d27c9" ON "organizations" ("type", "isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_cf1baa6cc3424b5f42879b153d" ON "user_attributes" ("key", "value") `);
        await queryRunner.query(`CREATE INDEX "IDX_bf6adde0625994a5e0d30f6111" ON "user_attributes" ("organizationId", "key") `);
        await queryRunner.query(`CREATE INDEX "IDX_fe344ed4b552eb244b03159a3e" ON "user_attributes" ("userId", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_3676155292d72c67cd4e090514" ON "users" ("status") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_b1679ad39627f7359fbb8405c6" ON "users" ("cognitoId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_97672ac88f789774dd47f7c8be" ON "users" ("email") `);
        await queryRunner.query(`CREATE INDEX "IDX_c7f98de055d7d9117d1fa4d9e0" ON "user_organization_memberships" ("organizationId", "role") `);
        await queryRunner.query(`CREATE INDEX "IDX_f54c473191e103461e4f66eb49" ON "user_organization_memberships" ("userId", "isDefault") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_29049c4f373b5982cb3219ef67" ON "user_roles" ("user_id", "role_name", "organization_id") WHERE is_active = true`);
        await queryRunner.query(`CREATE INDEX "IDX_a3bf9597cdbbbcfa43bd1fe814" ON "user_roles" ("organization_id", "role_name") `);
        await queryRunner.query(`CREATE INDEX "IDX_baba8149897cfe639add020e7e" ON "user_roles" ("user_id", "organization_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_a61b0d61295ff832595b91d070" ON "territories" ("parent_territory_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_ddb09ee7ae626009f1341efa22" ON "territories" ("type") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_e1a81c0cf29b429237ed209cc0" ON "territories" ("code") `);
        await queryRunner.query(`CREATE INDEX "IDX_56ce8d405de7cdcedd31d900ba" ON "invitations" ("status") `);
        await queryRunner.query(`CREATE INDEX "IDX_e577dcf9bb6d084373ed399850" ON "invitations" ("token") `);
        await queryRunner.query(`CREATE INDEX "IDX_677eca9ee5361ce21aa34d4525" ON "invitations" ("email", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_deb2581bdb1ced3b54161f794c" ON "insurance_agents" ("license_number") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_94fdff1de6def4f29c0a0dc91d" ON "insurance_agents" ("agent_code") `);
        await queryRunner.query(`CREATE INDEX "IDX_b91463b11cba66b27dc4a4bd20" ON "insurance_agents" ("branch_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_0a7d13e636c056d4f4036f5c46" ON "insurance_agents" ("user_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_657daaed8ff2e07f9176b935a1" ON "insurance_branches" ("manager_id") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_2f8f88376908f0d518e2ee8d39" ON "insurance_branches" ("branch_code") `);
        await queryRunner.query(`CREATE INDEX "IDX_130a8c8b2e9dfd72459b8411f3" ON "insurance_branches" ("organization_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_98377de4d7013e5e074748ee24" ON "email_service_configs" ("provider") WHERE "organizationId" IS NULL`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_8714cfdf2437896c171adb5242" ON "email_service_configs" ("provider", "organizationId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_0343fd5c80d17db91101119df8" ON "attribute_definitions" ("key") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_c7a14ad321e99ef70bfa89e6ea" ON "attribute_definitions" ("organizationId", "name") WHERE organization_id IS NOT NULL`);
        await queryRunner.query(`CREATE INDEX "IDX_ecc81c7b697887580ad10922fa" ON "attribute_definitions" ("category", "isSystem") `);
        await queryRunner.query(`CREATE INDEX "IDX_2fa2dfc7daa3b6730231351107" ON "organizations_closure" ("id_ancestor") `);
        await queryRunner.query(`CREATE INDEX "IDX_58bbb42b8f3a85417296bc398e" ON "organizations_closure" ("id_descendant") `);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "UQ_6416db4c03e1ff5f0a8c1f7d9df" UNIQUE ("userId", "organizationId", "key")`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "UQ_c144eb5d08cc3b35531bbc76bd5" UNIQUE ("userId", "organizationId")`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD CONSTRAINT "FK_803b94f8232e61602086bbbcb9c" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "policies" ADD CONSTRAINT "FK_af702ea1ebe167b21698949f454" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "policies" ADD CONSTRAINT "FK_2097a324a987f6d0b56087b5262" FOREIGN KEY ("policySetId") REFERENCES "policy_sets"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_2fdbbae70ff802bc8b703ee7c5c" FOREIGN KEY ("orderId") REFERENCES "orders"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_52a272e6c6a006922bc80d7e197" FOREIGN KEY ("customerId") REFERENCES "customers"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_5b86d893321c200c779f9464cac" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "customers" ADD CONSTRAINT "FK_fac3145c49520eae6248715b26b" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_e5de51ca888d8b1f5ac25799dd1" FOREIGN KEY ("customerId") REFERENCES "customers"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_07ab27b1d7bf97892493f47d929" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_f1d359a55923bb45b057fbdab0d" FOREIGN KEY ("orderId") REFERENCES "orders"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_cdb99c05982d5191ac8465ac010" FOREIGN KEY ("productId") REFERENCES "products"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_746c8057201c260fe77b5e7f614" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "FK_b9e8b8e8d88eed668c3e6e69d3c" FOREIGN KEY ("parentId") REFERENCES "organizations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "FK_e49b58a79682836047c6158a72a" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "FK_bd08d469911cda6ded11a856a67" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "FK_040fcb867bda3ae4e6be9e4e6f4" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "FK_a258c3139e583d482ec60ff740e" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_lifecycle_events" ADD CONSTRAINT "FK_33b564cf36dda4b34a8e860c570" FOREIGN KEY ("taskTypeId") REFERENCES "task_types"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD CONSTRAINT "FK_158887786322644785a61e6980e" FOREIGN KEY ("taskId") REFERENCES "tasks"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD CONSTRAINT "FK_f3691163d6ec8381abbecc9f20f" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_87fc96ddd3cf917315d4c69bdc3" FOREIGN KEY ("taskTypeId") REFERENCES "task_types"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_9a16d2c86252529f622fa53f1e3" FOREIGN KEY ("assigneeId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_660898d912c6e71107e9ef8f38d" FOREIGN KEY ("createdById") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_a9a5a9fada64fc56e2aaf2f9464" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_34701b0b8d466af308ba202e4ef" FOREIGN KEY ("parentTaskId") REFERENCES "tasks"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_types" ADD CONSTRAINT "FK_a9ba08a9207680293e4a297bcb2" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "territories" ADD CONSTRAINT "FK_a61b0d61295ff832595b91d0708" FOREIGN KEY ("parent_territory_id") REFERENCES "territories"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_b9139f00cebfadced76bca3084f" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_b60325e5302be0dad38b423314c" FOREIGN KEY ("invitedById") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_99eda4173251f598557dd892007" FOREIGN KEY ("acceptedUserId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ADD CONSTRAINT "FK_0a7d13e636c056d4f4036f5c46c" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ADD CONSTRAINT "FK_b91463b11cba66b27dc4a4bd20d" FOREIGN KEY ("branch_id") REFERENCES "insurance_branches"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ADD CONSTRAINT "FK_130a8c8b2e9dfd72459b8411f3b" FOREIGN KEY ("organization_id") REFERENCES "organizations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ADD CONSTRAINT "FK_657daaed8ff2e07f9176b935a1b" FOREIGN KEY ("manager_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "refresh_tokens" ADD CONSTRAINT "FK_610102b60fea1455310ccd299de" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "email_service_configs" ADD CONSTRAINT "FK_8221a85f2a7315b83f6320b6d69" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);

        // Recreate the materialized view after organization table changes
        await queryRunner.query(`
          CREATE MATERIALIZED VIEW organization_hierarchy_view AS
          WITH RECURSIVE org_tree AS (
            -- Base case: root organizations
            SELECT 
              o.id,
              o."parentId",
              o.name,
              o.code,
              o.type,
              o.status,
              o.settings,
              o."createdAt",
              o."updatedAt",
              o.id as root_id,
              o.name as root_name,
              0 as depth,
              ARRAY[o.id] as path,
              ARRAY[o.name] as name_path,
              o.name::text as full_path
            FROM organizations o
            WHERE o."parentId" IS NULL
            
            UNION ALL
            
            -- Recursive case
            SELECT 
              o.id,
              o."parentId",
              o.name,
              o.code,
              o.type,
              o.status,
              o.settings,
              o."createdAt",
              o."updatedAt",
              ot.root_id,
              ot.root_name,
              ot.depth + 1,
              ot.path || o.id,
              ot.name_path || o.name,
              ot.full_path || ' > ' || o.name
            FROM organizations o
            JOIN org_tree ot ON o."parentId" = ot.id
          )
          SELECT * FROM org_tree
        `);
        
        await queryRunner.query(`CREATE INDEX idx_org_hierarchy_id ON organization_hierarchy_view(id)`);
        await queryRunner.query(`CREATE INDEX idx_org_hierarchy_root ON organization_hierarchy_view(root_id)`);
        await queryRunner.query(`CREATE INDEX idx_org_hierarchy_parent ON organization_hierarchy_view("parentId")`);
        await queryRunner.query(`CREATE INDEX idx_org_hierarchy_depth ON organization_hierarchy_view(depth)`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD CONSTRAINT "FK_5fa3b977dc566273c38424fd3aa" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" ADD CONSTRAINT "FK_2fa2dfc7daa3b67302313511078" FOREIGN KEY ("id_ancestor") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" ADD CONSTRAINT "FK_58bbb42b8f3a85417296bc398ed" FOREIGN KEY ("id_descendant") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "organizations_closure" DROP CONSTRAINT "FK_58bbb42b8f3a85417296bc398ed"`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" DROP CONSTRAINT "FK_2fa2dfc7daa3b67302313511078"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP CONSTRAINT "FK_5fa3b977dc566273c38424fd3aa"`);
        await queryRunner.query(`ALTER TABLE "email_service_configs" DROP CONSTRAINT "FK_8221a85f2a7315b83f6320b6d69"`);
        await queryRunner.query(`ALTER TABLE "refresh_tokens" DROP CONSTRAINT "FK_610102b60fea1455310ccd299de"`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" DROP CONSTRAINT "FK_657daaed8ff2e07f9176b935a1b"`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" DROP CONSTRAINT "FK_130a8c8b2e9dfd72459b8411f3b"`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" DROP CONSTRAINT "FK_b91463b11cba66b27dc4a4bd20d"`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" DROP CONSTRAINT "FK_0a7d13e636c056d4f4036f5c46c"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_99eda4173251f598557dd892007"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_b60325e5302be0dad38b423314c"`);
        await queryRunner.query(`ALTER TABLE "invitations" DROP CONSTRAINT "FK_b9139f00cebfadced76bca3084f"`);
        await queryRunner.query(`ALTER TABLE "territories" DROP CONSTRAINT "FK_a61b0d61295ff832595b91d0708"`);
        await queryRunner.query(`ALTER TABLE "task_types" DROP CONSTRAINT "FK_a9ba08a9207680293e4a297bcb2"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_34701b0b8d466af308ba202e4ef"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_a9a5a9fada64fc56e2aaf2f9464"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_660898d912c6e71107e9ef8f38d"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_9a16d2c86252529f622fa53f1e3"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP CONSTRAINT "FK_87fc96ddd3cf917315d4c69bdc3"`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP CONSTRAINT "FK_f3691163d6ec8381abbecc9f20f"`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP CONSTRAINT "FK_158887786322644785a61e6980e"`);
        await queryRunner.query(`ALTER TABLE "task_lifecycle_events" DROP CONSTRAINT "FK_33b564cf36dda4b34a8e860c570"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "FK_a258c3139e583d482ec60ff740e"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "FK_040fcb867bda3ae4e6be9e4e6f4"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "FK_bd08d469911cda6ded11a856a67"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "FK_e49b58a79682836047c6158a72a"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "FK_b9e8b8e8d88eed668c3e6e69d3c"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_746c8057201c260fe77b5e7f614"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_cdb99c05982d5191ac8465ac010"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_f1d359a55923bb45b057fbdab0d"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_07ab27b1d7bf97892493f47d929"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_e5de51ca888d8b1f5ac25799dd1"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP CONSTRAINT "FK_fac3145c49520eae6248715b26b"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_5b86d893321c200c779f9464cac"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_52a272e6c6a006922bc80d7e197"`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP CONSTRAINT "FK_2fdbbae70ff802bc8b703ee7c5c"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP CONSTRAINT "FK_2097a324a987f6d0b56087b5262"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP CONSTRAINT "FK_af702ea1ebe167b21698949f454"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP CONSTRAINT "FK_803b94f8232e61602086bbbcb9c"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP CONSTRAINT "UQ_c144eb5d08cc3b35531bbc76bd5"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP CONSTRAINT "UQ_6416db4c03e1ff5f0a8c1f7d9df"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_58bbb42b8f3a85417296bc398e"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2fa2dfc7daa3b6730231351107"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ecc81c7b697887580ad10922fa"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c7a14ad321e99ef70bfa89e6ea"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_0343fd5c80d17db91101119df8"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_8714cfdf2437896c171adb5242"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_98377de4d7013e5e074748ee24"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_130a8c8b2e9dfd72459b8411f3"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2f8f88376908f0d518e2ee8d39"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_657daaed8ff2e07f9176b935a1"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_0a7d13e636c056d4f4036f5c46"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_b91463b11cba66b27dc4a4bd20"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_94fdff1de6def4f29c0a0dc91d"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_deb2581bdb1ced3b54161f794c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_677eca9ee5361ce21aa34d4525"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e577dcf9bb6d084373ed399850"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_56ce8d405de7cdcedd31d900ba"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e1a81c0cf29b429237ed209cc0"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ddb09ee7ae626009f1341efa22"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a61b0d61295ff832595b91d070"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_baba8149897cfe639add020e7e"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a3bf9597cdbbbcfa43bd1fe814"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_29049c4f373b5982cb3219ef67"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_f54c473191e103461e4f66eb49"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c7f98de055d7d9117d1fa4d9e0"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_97672ac88f789774dd47f7c8be"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_b1679ad39627f7359fbb8405c6"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_3676155292d72c67cd4e090514"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_fe344ed4b552eb244b03159a3e"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_bf6adde0625994a5e0d30f6111"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_cf1baa6cc3424b5f42879b153d"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e94093b7608688ada3503d27c9"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c9b546a5c94d422624b3d8a27f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_5b38e905567dafe7dac9e8bdf1"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ec69270b0e2426173c0ec4b73c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c3932231d2385ac248d0888d95"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_f1d359a55923bb45b057fbdab0"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_cdb99c05982d5191ac8465ac01"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_00c2f0cb222413532c3546aa15"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e5de51ca888d8b1f5ac25799dd"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_59b0c3b34ea0fa5562342f2414"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a1bb11e2ea78aa609b5cb3127c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a7225962aabeb63f70e6abc3fb"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_99ae4942e9ee8d0381dc7cfc09"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_dd44f67433aadad2785aecd5be"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_01755e991f5e1de30dc512e7a4"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_52a272e6c6a006922bc80d7e19"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2fdbbae70ff802bc8b703ee7c5"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2d5fa024a84dceb158b2b95f34"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c86f4b96160cac09f788303b8a"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_04c689b4216fd28fe953e6850a"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_4858b98abb23a6657c2e0ad23b"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2097a324a987f6d0b56087b526"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_56869fc174a32ffb9af041a8e6"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_065c59d0e8b46249d2381ff507"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ALTER COLUMN "isSystem" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ALTER COLUMN "isRequired" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "data_type"`);
        await queryRunner.query(`DROP TYPE "public"."attribute_definitions_data_type_enum"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "data_type" character varying(50)`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "type"`);
        await queryRunner.query(`DROP TYPE "public"."attribute_definitions_type_enum"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "type" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "category"`);
        await queryRunner.query(`DROP TYPE "public"."attribute_definitions_category_enum"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "category" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP CONSTRAINT "UQ_0343fd5c80d17db91101119df88"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "key"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "key" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "territories" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "territories" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`CREATE TYPE "public"."task_type_scope_enum_old" AS ENUM('system', 'organization')`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" TYPE "public"."task_type_scope_enum_old" USING "scope"::"text"::"public"."task_type_scope_enum_old"`);
        await queryRunner.query(`ALTER TABLE "task_types" ALTER COLUMN "scope" SET DEFAULT 'organization'`);
        await queryRunner.query(`DROP TYPE "public"."task_types_scope_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."task_type_scope_enum_old" RENAME TO "task_type_scope_enum"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "tags" DROP NOT NULL`);
        await queryRunner.query(`CREATE TYPE "public"."task_priority_enum_old" AS ENUM('low', 'medium', 'high', 'urgent')`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" TYPE "public"."task_priority_enum_old" USING "priority"::"text"::"public"."task_priority_enum_old"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "priority" SET DEFAULT 'medium'`);
        await queryRunner.query(`DROP TYPE "public"."tasks_priority_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."task_priority_enum_old" RENAME TO "task_priority_enum"`);
        await queryRunner.query(`ALTER TABLE "tasks" DROP COLUMN "currentLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD "currentLifecycleEventId" uuid`);
        await queryRunner.query(`CREATE TYPE "public"."task_status_enum_old" AS ENUM('pending', 'in_progress', 'completed', 'cancelled', 'on_hold')`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" TYPE "public"."task_status_enum_old" USING "status"::"text"::"public"."task_status_enum_old"`);
        await queryRunner.query(`ALTER TABLE "tasks" ALTER COLUMN "status" SET DEFAULT 'pending'`);
        await queryRunner.query(`DROP TYPE "public"."tasks_status_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."task_status_enum_old" RENAME TO "task_status_enum"`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP COLUMN "toLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD "toLifecycleEventId" uuid`);
        await queryRunner.query(`ALTER TABLE "task_history" DROP COLUMN "fromLifecycleEventId"`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD "fromLifecycleEventId" uuid`);
        await queryRunner.query(`ALTER TABLE "user_roles" ALTER COLUMN "valid_from" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_roles" ALTER COLUMN "assigned_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "endDate"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "endDate" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "startDate"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "startDate" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "isActive" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "isDefault" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ALTER COLUMN "permissions" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "role"`);
        await queryRunner.query(`DROP TYPE "public"."user_organization_memberships_role_enum"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "role" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "emailVerified" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "attributes" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."users_status_enum"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "status" character varying NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "lastName"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "lastName" character varying`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "firstName"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "firstName" character varying`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_users_email" UNIQUE ("email")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "UQ_b1679ad39627f7359fbb8405c66"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "cognitoId"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "cognitoId" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "UQ_users_cognitoId" UNIQUE ("cognitoId")`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_attributes" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ALTER COLUMN "valid_from" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "organizations" ALTER COLUMN "isActive" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" ALTER COLUMN "settings" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "UQ_7e27c3b62c681fbe3e2322535f2"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "code"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "code" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "UQ_organizations_code" UNIQUE ("code")`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "type"`);
        await queryRunner.query(`DROP TYPE "public"."organizations_type_enum"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "type" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "products" ALTER COLUMN "attributes" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."products_status_enum"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "status" character varying(50) NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "products" ALTER COLUMN "currency" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "category"`);
        await queryRunner.query(`DROP TYPE "public"."products_category_enum"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "category" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "sku"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "sku" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "products" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "products" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "total" SET DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "total" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "tax" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ALTER COLUMN "discount" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "currency" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "total" SET DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "total" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "discount" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "shipping" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "tax" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "subtotal" SET DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "subtotal" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "shippingMethod"`);
        await queryRunner.query(`DROP TYPE "public"."orders_shippingmethod_enum"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "shippingMethod" character varying(50) DEFAULT 'standard'`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "billingAddress" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "shippingAddress"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "shippingAddress" text`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "orderDate" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "orders" ALTER COLUMN "orderDate" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "paymentStatus"`);
        await queryRunner.query(`DROP TYPE "public"."orders_paymentstatus_enum"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "paymentStatus" character varying NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."orders_status_enum"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "status" character varying(50) NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "UQ_59b0c3b34ea0fa5562342f24143"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "orderNumber"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "orderNumber" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "UQ_order_number" UNIQUE ("orderNumber")`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "orders" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "customers" ALTER COLUMN "currency" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "email" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "lastName"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "lastName" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "firstName"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "firstName" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."customers_status_enum"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "status" character varying(50) NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "type"`);
        await queryRunner.query(`DROP TYPE "public"."customers_type_enum"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "type" character varying(50) DEFAULT 'individual'`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "customers" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "transactions" ALTER COLUMN "metadata" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "referenceNumber"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "referenceNumber" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "UQ_reference_number" UNIQUE ("referenceNumber")`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "paymentMethod"`);
        await queryRunner.query(`DROP TYPE "public"."transactions_paymentmethod_enum"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "paymentMethod" character varying(50)`);
        await queryRunner.query(`ALTER TABLE "transactions" ALTER COLUMN "currency" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."transactions_status_enum"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "status" character varying NOT NULL DEFAULT 'pending'`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "type"`);
        await queryRunner.query(`DROP TYPE "public"."transactions_type_enum"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "type" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "transactions" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "conditions" SET DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "actions" SET DEFAULT ARRAY[]`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "resources" SET DEFAULT '[]'`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "subjects" SET DEFAULT '[]'`);
        await queryRunner.query(`CREATE TYPE "public"."policy_scope_enum_old" AS ENUM('system', 'organization')`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" TYPE "public"."policy_scope_enum_old" USING "scope"::"text"::"public"."policy_scope_enum_old"`);
        await queryRunner.query(`ALTER TABLE "policies" ALTER COLUMN "scope" SET DEFAULT 'organization'`);
        await queryRunner.query(`DROP TYPE "public"."policies_scope_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."policy_scope_enum_old" RENAME TO "policy_scope_enum"`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policies" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "policy_field_rules"."permission" IS 'read, write, or deny'`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" DROP COLUMN "permission"`);
        await queryRunner.query(`DROP TYPE "public"."policy_field_rules_permission_enum"`);
        await queryRunner.query(`ALTER TABLE "policy_field_rules" ADD "permission" character varying(20) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ALTER COLUMN "organizationId" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "updatedAt"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "updatedAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "policy_sets" DROP COLUMN "createdAt"`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "createdAt" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "is_required" boolean DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "is_system" boolean DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "validationRules" jsonb DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "required" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "status" character varying NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "attributes" jsonb DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "users" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD "organization_id" uuid`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "status" character varying NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "products" ADD "type" character varying(50) DEFAULT 'physical'`);
        await queryRunner.query(`ALTER TABLE "products" ADD "stockQuantity" integer NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "products" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "totalPrice" numeric(10,2) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "totalAmount" numeric(10,2) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "orders" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "attributes" jsonb DEFAULT '{}'`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "address" text`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "phone" character varying`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "customers" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "balanceAfter" numeric(10,2) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "policies" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "status" character varying NOT NULL DEFAULT 'active'`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "priority" integer NOT NULL DEFAULT '50'`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD "deletedAt" TIMESTAMP`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ca9661360d25617cc14c77ad32"`);
        await queryRunner.query(`DROP TABLE "refresh_tokens"`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD CONSTRAINT "UQ_attribute_key_org" UNIQUE ("key", "organizationId")`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "UQ_user_org_membership" UNIQUE ("userId", "organizationId")`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "UQ_user_attributes_user_org_key" UNIQUE ("userId", "organizationId", "key")`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "UQ_product_sku_org" UNIQUE ("sku", "organizationId")`);
        await queryRunner.query(`CREATE INDEX "IDX_organization_closure_descendant" ON "organizations_closure" ("id_descendant") `);
        await queryRunner.query(`CREATE INDEX "IDX_organization_closure_ancestor" ON "organizations_closure" ("id_ancestor") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_attribute_definitions_key" ON "attribute_definitions" ("key") `);
        await queryRunner.query(`CREATE INDEX "IDX_email_service_configs_provider_null" ON "email_service_configs" ("provider") WHERE ("organizationId" IS NULL)`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_email_service_configs_provider_org" ON "email_service_configs" ("provider", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_insurance_branches_manager" ON "insurance_branches" ("manager_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_insurance_branches_org" ON "insurance_branches" ("organization_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_insurance_agents_license" ON "insurance_agents" ("license_number") `);
        await queryRunner.query(`CREATE INDEX "IDX_insurance_agents_branch" ON "insurance_agents" ("branch_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_insurance_agents_user" ON "insurance_agents" ("user_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_invitation_status" ON "invitations" ("status") `);
        await queryRunner.query(`CREATE INDEX "IDX_invitation_token" ON "invitations" ("token") `);
        await queryRunner.query(`CREATE INDEX "IDX_invitation_email_organization" ON "invitations" ("email", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_territories_parent" ON "territories" ("parent_territory_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_territories_type" ON "territories" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_task_types_scope" ON "task_types" ("scope") `);
        await queryRunner.query(`CREATE INDEX "IDX_task_types_organization" ON "task_types" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_tasks_due_date" ON "tasks" ("dueDate") `);
        await queryRunner.query(`CREATE INDEX "IDX_tasks_priority" ON "tasks" ("priority") `);
        await queryRunner.query(`CREATE INDEX "IDX_tasks_status" ON "tasks" ("status") `);
        await queryRunner.query(`CREATE INDEX "IDX_tasks_assignee" ON "tasks" ("assigneeId") `);
        await queryRunner.query(`CREATE INDEX "IDX_tasks_organization" ON "tasks" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_task_history_user" ON "task_history" ("userId") `);
        await queryRunner.query(`CREATE INDEX "IDX_task_history_task" ON "task_history" ("taskId") `);
        await queryRunner.query(`CREATE INDEX "IDX_task_lifecycle_events_task_type" ON "task_lifecycle_events" ("taskTypeId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "UQ_user_roles_active" ON "user_roles" ("user_id", "role_name", "organization_id") WHERE (is_active = true)`);
        await queryRunner.query(`CREATE INDEX "IDX_user_roles_org_role" ON "user_roles" ("role_name", "organization_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_user_roles_user_org" ON "user_roles" ("user_id", "organization_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_memberships_organizationId" ON "user_organization_memberships" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_memberships_userId" ON "user_organization_memberships" ("userId") `);
        await queryRunner.query(`CREATE INDEX "IDX_memberships_userId_isDefault" ON "user_organization_memberships" ("userId", "isDefault") `);
        await queryRunner.query(`CREATE INDEX "IDX_users_cognitoId" ON "users" ("cognitoId") `);
        await queryRunner.query(`CREATE INDEX "IDX_users_email" ON "users" ("email") `);
        await queryRunner.query(`CREATE INDEX "IDX_user_attributes_public" ON "user_attributes" ("organizationId", "isPublic") WHERE ("isPublic" = true)`);
        await queryRunner.query(`CREATE INDEX "IDX_user_attributes_value" ON "user_attributes" ("value") `);
        await queryRunner.query(`CREATE INDEX "IDX_user_attributes_organizationId_key" ON "user_attributes" ("organizationId", "key") `);
        await queryRunner.query(`CREATE INDEX "IDX_user_attributes_userId_organizationId" ON "user_attributes" ("userId", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_organizations_parentId" ON "organizations" ("parentId") `);
        await queryRunner.query(`CREATE INDEX "IDX_products_variants" ON "products" ("variants") `);
        await queryRunner.query(`CREATE INDEX "IDX_products_category" ON "products" ("category") `);
        await queryRunner.query(`CREATE INDEX "IDX_products_sku" ON "products" ("sku") `);
        await queryRunner.query(`CREATE INDEX "IDX_products_organizationId" ON "products" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_order_items_orderId" ON "order_items" ("orderId") `);
        await queryRunner.query(`CREATE INDEX "IDX_orders_orderDate" ON "orders" ("orderDate") `);
        await queryRunner.query(`CREATE INDEX "IDX_orders_customerId" ON "orders" ("customerId") `);
        await queryRunner.query(`CREATE INDEX "IDX_orders_organizationId" ON "orders" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_customers_email" ON "customers" ("email") `);
        await queryRunner.query(`CREATE INDEX "IDX_customers_organizationId" ON "customers" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_customers_type" ON "customers" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_referenceNumber" ON "transactions" ("referenceNumber") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_type" ON "transactions" ("type") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_orderId" ON "transactions" ("orderId") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_organizationId_status" ON "transactions" ("status", "organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_customerId" ON "transactions" ("customerId") `);
        await queryRunner.query(`CREATE INDEX "IDX_transactions_organizationId" ON "transactions" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "idx_policies_policyset" ON "policies" ("policySetId") `);
        await queryRunner.query(`CREATE INDEX "idx_policies_priority" ON "policies" ("priority") `);
        await queryRunner.query(`CREATE INDEX "idx_policies_org_active" ON "policies" ("organizationId", "isActive") `);
        await queryRunner.query(`CREATE INDEX "IDX_policies_scope_organizationId" ON "policies" ("organizationId", "scope") `);
        await queryRunner.query(`CREATE INDEX "IDX_policies_scope" ON "policies" ("scope") `);
        await queryRunner.query(`CREATE INDEX "IDX_policies_organizationId" ON "policies" ("organizationId") `);
        await queryRunner.query(`CREATE INDEX "IDX_policy_field_rules_lookup" ON "policy_field_rules" ("policy_id", "resource_type", "field_name") `);
        await queryRunner.query(`ALTER TABLE "organizations_closure" ADD CONSTRAINT "FK_closure_descendant" FOREIGN KEY ("id_descendant") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "organizations_closure" ADD CONSTRAINT "FK_closure_ancestor" FOREIGN KEY ("id_ancestor") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "attribute_definitions" ADD CONSTRAINT "FK_attribute_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "email_service_configs" ADD CONSTRAINT "FK_email_service_configs_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ADD CONSTRAINT "FK_657daaed8ff2e07f9176b935a1b" FOREIGN KEY ("manager_id") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_branches" ADD CONSTRAINT "FK_130a8c8b2e9dfd72459b8411f3b" FOREIGN KEY ("organization_id") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ADD CONSTRAINT "FK_b91463b11cba66b27dc4a4bd20d" FOREIGN KEY ("branch_id") REFERENCES "insurance_branches"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "insurance_agents" ADD CONSTRAINT "FK_0a7d13e636c056d4f4036f5c46c" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_invitation_accepted_user" FOREIGN KEY ("acceptedUserId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_invitation_invited_by" FOREIGN KEY ("invitedById") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "invitations" ADD CONSTRAINT "FK_invitation_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "territories" ADD CONSTRAINT "FK_a61b0d61295ff832595b91d0708" FOREIGN KEY ("parent_territory_id") REFERENCES "territories"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_types" ADD CONSTRAINT "FK_task_types_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_tasks_parent" FOREIGN KEY ("parentTaskId") REFERENCES "tasks"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_tasks_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_tasks_created_by" FOREIGN KEY ("createdById") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_tasks_assignee" FOREIGN KEY ("assigneeId") REFERENCES "users"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tasks" ADD CONSTRAINT "FK_tasks_task_type" FOREIGN KEY ("taskTypeId") REFERENCES "task_types"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD CONSTRAINT "FK_task_history_user" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_history" ADD CONSTRAINT "FK_task_history_task" FOREIGN KEY ("taskId") REFERENCES "tasks"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "task_lifecycle_events" ADD CONSTRAINT "FK_task_lifecycle_events_task_type" FOREIGN KEY ("taskTypeId") REFERENCES "task_types"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "FK_membership_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_organization_memberships" ADD CONSTRAINT "FK_membership_user" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "FK_aca56d173ca9d224cd5e5cf5b14" FOREIGN KEY ("organization_id") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "FK_user_attributes_organizationId" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "user_attributes" ADD CONSTRAINT "FK_user_attributes_userId" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "FK_organizations_parent" FOREIGN KEY ("parentId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_product_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_order_item_product" FOREIGN KEY ("productId") REFERENCES "products"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_order_item_order" FOREIGN KEY ("orderId") REFERENCES "orders"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_order_customer" FOREIGN KEY ("customerId") REFERENCES "customers"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_order_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "customers" ADD CONSTRAINT "FK_customer_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_transaction_order" FOREIGN KEY ("orderId") REFERENCES "orders"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_transaction_customer" FOREIGN KEY ("customerId") REFERENCES "customers"("id") ON DELETE RESTRICT ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "transactions" ADD CONSTRAINT "FK_transaction_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "policies" ADD CONSTRAINT "FK_policy_set" FOREIGN KEY ("policySetId") REFERENCES "policy_sets"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "policies" ADD CONSTRAINT "FK_policy_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "policy_sets" ADD CONSTRAINT "FK_policy_set_organization" FOREIGN KEY ("organizationId") REFERENCES "organizations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

}
